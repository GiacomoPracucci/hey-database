{"version":3,"file":"schema.bundle.js","sources":["../js/services/api-service.js","../js/services/schema-service.js","../js/pages/schema-page.js"],"sourcesContent":["/**\n * ApiService\n *\n * Servizio base per gestire tutte le chiamate API.\n * Fornisce metodi di utilità per le chiamate HTTP e gestione degli errori.\n */\nclass ApiService {\n  /**\n   * Effettua una richiesta HTTP\n   * @param {string} endpoint - L'endpoint da chiamare\n   * @param {Object} options - Opzioni della richiesta\n   * @returns {Promise} Promise con la risposta\n   */\n  async request(endpoint, options = {}) {\n    try {\n      const defaultOptions = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const response = await fetch(endpoint, { ...defaultOptions, ...options });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || \"Si è verificato un errore\");\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Effettua una richiesta GET\n   * @param {string} endpoint\n   * @returns {Promise}\n   */\n  get(endpoint) {\n    return this.request(endpoint);\n  }\n\n  /**\n   * Effettua una richiesta POST\n   * @param {string} endpoint\n   * @param {Object} data\n   * @returns {Promise}\n   */\n  post(endpoint, data) {\n    return this.request(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    });\n  }\n}\n\n// Esporta un'istanza singola del servizio\nexport const apiService = new ApiService();\n","/**\n * SchemaService\n *\n * Gestisce la logica di business per la visualizzazione e interazione con lo schema del database.\n * Si occupa di:\n * - Recuperare e formattare i metadati dello schema\n * - Gestire le relazioni tra tabelle\n * - Organizzare il layout del grafo\n * - Gestire lo stato della visualizzazione\n */\nimport { apiService } from \"./api-service.js\";\n\nclass SchemaService {\n  constructor() {\n    this.endpoints = {\n      metadata: \"/schema/api/metadata\",\n    };\n\n    // Cache per i metadati dello schema\n    this._schemaMetadata = null;\n  }\n\n  /**\n   * Recupera i metadati dello schema\n   * @returns {Promise} Promise con i metadati formattati\n   */\n  async getSchemaMetadata() {\n    // Usa la cache se disponibile\n    if (this._schemaMetadata) {\n      return this._schemaMetadata;\n    }\n\n    const response = await apiService.get(this.endpoints.metadata);\n\n    if (response.success) {\n      this._schemaMetadata = this.formatSchemaData(response.data);\n      return this._schemaMetadata;\n    }\n\n    throw new Error(\"Errore nel recupero dei metadati dello schema\");\n  }\n\n  /**\n   * Formatta i dati dello schema per l'utilizzo nel grafo\n   * @param {Object} rawData\n   * @returns {Object} Dati formattati\n   */\n  formatSchemaData(rawData) {\n    const elements = [];\n\n    // Processa le tabelle\n    rawData.tables.forEach((table) => {\n      // Aggiunge informazioni FK alle colonne\n      const tableData = { ...table };\n      if (tableData.columns) {\n        tableData.columns = tableData.columns.map((col) => ({\n          ...col,\n          isForeignKey: this.isColumnForeignKey(col.name, table.relationships),\n        }));\n      }\n\n      // Crea il nodo per la tabella\n      elements.push({\n        group: \"nodes\",\n        data: {\n          id: table.name,\n          tableData: tableData,\n        },\n        classes: [\"table-node\"],\n      });\n\n      // Crea gli archi per le relazioni\n      if (Array.isArray(table.relationships)) {\n        table.relationships.forEach((rel, index) => {\n          elements.push({\n            group: \"edges\",\n            data: {\n              id: `edge-${table.name}-${rel.toTable}-${index}`,\n              source: table.name,\n              target: rel.toTable,\n              relationship: rel.type,\n              fromColumns: rel.fromColumns,\n              toColumns: rel.toColumns,\n            },\n          });\n        });\n      }\n    });\n\n    return { elements };\n  }\n\n  /**\n   * Verifica se una colonna è una foreign key\n   * @param {string} columnName\n   * @param {Array} relationships\n   * @returns {boolean}\n   */\n  isColumnForeignKey(columnName, relationships) {\n    if (!Array.isArray(relationships)) return false;\n\n    return relationships.some((rel) => rel.fromColumns.includes(columnName));\n  }\n\n  /**\n   * Calcola il layout ottimale per il grafo\n   * @param {Object} graphData\n   * @returns {Object} Configurazione del layout\n   */\n  calculateOptimalLayout(graphData) {\n    const nodeCount = graphData.elements.filter(\n      (el) => el.group === \"nodes\"\n    ).length;\n\n    // Layout gerarchico per grafi grandi\n    if (nodeCount > 10) {\n      return {\n        name: \"dagre\",\n        rankDir: \"TB\",\n        rankSep: 100,\n        nodeSep: 80,\n        padding: 50,\n      };\n    }\n\n    // Layout organico per grafi piccoli\n    return {\n      name: \"cose\",\n      idealEdgeLength: 150,\n      nodeOverlap: 20,\n      refresh: 20,\n      padding: 30,\n      randomize: false,\n      componentSpacing: 150,\n      nodeRepulsion: 400000,\n      edgeElasticity: 100,\n      nestingFactor: 5,\n      gravity: 80,\n      numIter: 1000,\n    };\n  }\n\n  /**\n   * Recupera i dettagli di una tabella specifica\n   * @param {string} tableName\n   * @returns {Promise<Object>} Dettagli della tabella\n   */\n  async getTableDetails(tableName) {\n    const schema = await this.getSchemaMetadata();\n    const tableNode = schema.elements.find(\n      (el) => el.group === \"nodes\" && el.data.id === tableName\n    );\n\n    if (!tableNode) {\n      throw new Error(`Tabella ${tableName} non trovata`);\n    }\n\n    // Trova tutte le relazioni che coinvolgono questa tabella\n    const relationships = schema.elements\n      .filter(\n        (el) =>\n          el.group === \"edges\" &&\n          (el.data.source === tableName || el.data.target === tableName)\n      )\n      .map((edge) => ({\n        type: edge.data.source === tableName ? \"outgoing\" : \"incoming\",\n        from: edge.data.source,\n        to: edge.data.target,\n        fromColumns: edge.data.fromColumns,\n        toColumns: edge.data.toColumns,\n      }));\n\n    return {\n      ...tableNode.data.tableData,\n      relationships,\n    };\n  }\n\n  /**\n   * Trova i percorsi tra due tabelle\n   * @param {string} sourceTable\n   * @param {string} targetTable\n   * @returns {Array} Array di percorsi possibili\n   */\n  async findTablePaths(sourceTable, targetTable) {\n    const schema = await this.getSchemaMetadata();\n    const paths = [];\n    const visited = new Set();\n\n    const findPaths = (current, path = []) => {\n      if (current === targetTable) {\n        paths.push([...path, current]);\n        return;\n      }\n\n      visited.add(current);\n\n      const edges = schema.elements.filter(\n        (el) =>\n          el.group === \"edges\" &&\n          (el.data.source === current || el.data.target === current)\n      );\n\n      for (const edge of edges) {\n        const next =\n          edge.data.source === current ? edge.data.target : edge.data.source;\n\n        if (!visited.has(next)) {\n          findPaths(next, [...path, current]);\n        }\n      }\n\n      visited.delete(current);\n    };\n\n    findPaths(sourceTable);\n    return paths;\n  }\n}\n\n// Esporta un'istanza singola del servizio\nexport const schemaService = new SchemaService();\n","/**\n * SchemaPage\n *\n * Gestisce la logica della pagina dello schema del database, coordinando:\n * - Visualizzazione del grafo delle relazioni\n * - Interazioni con lo schema\n * - Ricerca e filtri\n * - Zoom e navigazione\n * - Dettagli delle tabelle\n */\n\n// Verifica che le dipendenze globali siano caricate\nif (!window.cytoscape) {\n  throw new Error(\"Cytoscape library not loaded\");\n}\n\nif (!window.dagre) {\n  throw new Error(\"Dagre library not loaded\");\n}\n\nif (!customElements.get(\"schema-details-panel\")) {\n  throw new Error(\"Schema details panel component not registered\");\n}\n\nimport { schemaService } from \"../services/schema-service.js\";\n\nclass SchemaPage {\n  constructor() {\n    // Riferimenti agli elementi DOM\n    this.schemaViewer = document.getElementById(\"schemaViewer\");\n    this.searchInput = document.getElementById(\"schemaSearch\");\n    this.zoomInBtn = document.getElementById(\"zoomIn\");\n    this.zoomOutBtn = document.getElementById(\"zoomOut\");\n    this.zoomFitBtn = document.getElementById(\"zoomFit\");\n\n    // Istanza del grafo Cytoscape\n    this.cy = null;\n\n    // Stato corrente\n    this.currentTableDetails = null;\n\n    // Binding dei metodi\n    this.handleSearch = this.debounce(this.handleSearch.bind(this), 300);\n    this.handleTableSelect = this.handleTableSelect.bind(this);\n    this.handleDetailsClose = this.handleDetailsClose.bind(this);\n\n    // Inizializza la pagina\n    this.initialize();\n  }\n\n  /**\n   * Inizializza la pagina dello schema\n   */\n  async initialize() {\n    this.showLoadingIndicator();\n\n    try {\n      // Registra il plugin dagre per Cytoscape\n      cytoscape.use(window.cytoscapeDagre);\n\n      // Inizializza il grafo\n      await this.initializeCytoscape();\n\n      // Imposta gli event listeners\n      this.setupEventListeners();\n\n      // Carica i dati dello schema\n      await this.loadSchemaData();\n    } catch (error) {\n      console.error(\"Error initializing schema page:\", error);\n      this.showError(\"Failed to load schema data\");\n    } finally {\n      this.hideLoadingIndicator();\n    }\n  }\n\n  /**\n   * Inizializza Cytoscape con le configurazioni base\n   */\n  async initializeCytoscape() {\n    this.cy = cytoscape({\n      container: this.schemaViewer,\n      style: this.getCytoscapeStyles(),\n      wheelSensitivity: 0.2,\n      minZoom: 0.2,\n      maxZoom: 3,\n    });\n  }\n\n  /**\n   * Definisce gli stili per il grafo Cytoscape\n   */\n  getCytoscapeStyles() {\n    return [\n      {\n        selector: \"node\",\n        style: {\n          \"background-color\": \"#ffffff\",\n          \"border-width\": 1,\n          \"border-color\": \"#e2e8f0\",\n          \"border-opacity\": 1,\n          shape: \"roundrectangle\",\n          width: \"label\",\n          height: \"label\",\n          padding: \"20px\",\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": \"280px\",\n          \"text-valign\": \"center\",\n          \"text-halign\": \"center\",\n          \"font-family\": \"ui-monospace, monospace\",\n          \"font-size\": \"14px\",\n          color: \"#0f172a\",\n          \"text-margin-y\": 5,\n          \"compound-sizing-wrt-labels\": \"include\",\n          \"min-width\": \"200px\",\n          \"min-height\": \"50px\",\n          \"corner-radius\": \"8px\",\n        },\n      },\n      {\n        selector: \"edge\",\n        style: {\n          width: 1.5,\n          \"line-color\": \"#94a3b8\",\n          \"line-style\": \"dashed\",\n          \"curve-style\": \"bezier\",\n          \"target-arrow-color\": \"#94a3b8\",\n          \"target-arrow-shape\": \"triangle\",\n          \"arrow-scale\": 1,\n        },\n      },\n      {\n        selector: \".highlighted\",\n        style: {\n          \"border-color\": \"#3b82f6\",\n          \"border-width\": 2,\n          \"background-color\": \"#f8fafc\",\n        },\n      },\n    ];\n  }\n\n  /**\n   * Configura tutti gli event listeners\n   */\n  setupEventListeners() {\n    // Event listeners per la ricerca\n    this.searchInput.addEventListener(\"input\", this.handleSearch);\n    this.searchInput.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Escape\") {\n        this.searchInput.value = \"\";\n        this.handleSearch();\n      }\n    });\n\n    // Event listeners per lo zoom\n    this.zoomInBtn.addEventListener(\"click\", () => this.handleZoom(\"in\"));\n    this.zoomOutBtn.addEventListener(\"click\", () => this.handleZoom(\"out\"));\n    this.zoomFitBtn.addEventListener(\"click\", () => this.handleZoom(\"fit\"));\n\n    // Event listeners per il grafo\n    this.cy.on(\"tap\", \"node\", (e) => this.handleTableSelect(e.target.id()));\n    this.cy.on(\"mouseover\", \"node\", (e) =>\n      this.highlightRelatedNodes(e.target, true)\n    );\n    this.cy.on(\"mouseout\", \"node\", (e) =>\n      this.highlightRelatedNodes(e.target, false)\n    );\n  }\n\n  /**\n   * Carica e visualizza i dati dello schema\n   */\n  async loadSchemaData() {\n    const data = await schemaService.getSchemaMetadata();\n\n    // Aggiunge gli elementi al grafo\n    this.cy.add(data.elements);\n\n    // Applica il layout\n    const layout = this.cy.layout({\n      name: \"dagre\",\n      rankDir: \"TB\",\n      rankSep: 100,\n      nodeSep: 80,\n      padding: 50,\n      animate: true,\n      animationDuration: 500,\n    });\n\n    await layout.run();\n\n    // Centra e adatta la vista\n    this.cy.fit(50);\n    this.cy.center();\n  }\n\n  /**\n   * Gestisce la selezione di una tabella\n   * @param {string} tableId - ID della tabella selezionata\n   */\n  async handleTableSelect(tableId) {\n    try {\n      const tableDetails = await schemaService.getTableDetails(tableId);\n\n      // Se c'è già un pannello dettagli, lo rimuove\n      if (this.currentTableDetails) {\n        this.currentTableDetails.remove();\n      }\n\n      // Crea e aggiunge il nuovo pannello dettagli\n      this.currentTableDetails = document.createElement(\"schema-details-panel\");\n      this.currentTableDetails.setAttribute(\"table-name\", tableId);\n      this.currentTableDetails.columns = tableDetails.columns;\n      this.currentTableDetails.relationships = tableDetails.relationships;\n\n      // Ascolta l'evento di chiusura\n      this.currentTableDetails.addEventListener(\n        \"close\",\n        this.handleDetailsClose\n      );\n\n      document\n        .querySelector(\".schema-container\")\n        .appendChild(this.currentTableDetails);\n    } catch (error) {\n      console.error(\"Error loading table details:\", error);\n      this.showError(\"Failed to load table details\");\n    }\n  }\n\n  /**\n   * Gestisce la chiusura del pannello dettagli\n   */\n  handleDetailsClose() {\n    if (this.currentTableDetails) {\n      this.currentTableDetails.remove();\n      this.currentTableDetails = null;\n    }\n  }\n\n  /**\n   * Gestisce la ricerca nelle tabelle\n   */\n  handleSearch() {\n    const searchTerm = this.searchInput.value.toLowerCase().trim();\n\n    if (!searchTerm) {\n      // Reset della visualizzazione\n      this.cy.elements().removeClass(\"faded highlighted search-match\");\n      return;\n    }\n\n    // Trova i nodi che corrispondono alla ricerca\n    const matchingNodes = this.cy.nodes().filter((node) => {\n      const data = node.data(\"tableData\");\n      if (!data) return false;\n\n      return (\n        data.name.toLowerCase().includes(searchTerm) ||\n        data.columns.some(\n          (col) =>\n            col.name.toLowerCase().includes(searchTerm) ||\n            col.type.toLowerCase().includes(searchTerm)\n        )\n      );\n    });\n\n    if (matchingNodes.length > 0) {\n      // Evidenzia i risultati della ricerca\n      this.cy.elements().addClass(\"faded\");\n      matchingNodes.removeClass(\"faded\").addClass(\"search-match\");\n\n      // Evidenzia anche le relazioni tra i nodi trovati\n      const relatedEdges = matchingNodes.edgesWith(matchingNodes);\n      relatedEdges.removeClass(\"faded\");\n\n      // Centra la vista sui risultati\n      this.cy.animate({\n        fit: {\n          eles: matchingNodes,\n          padding: 50,\n        },\n        duration: 500,\n      });\n    }\n  }\n\n  /**\n   * Gestisce le operazioni di zoom\n   * @param {string} action - Tipo di zoom ('in', 'out', 'fit')\n   */\n  handleZoom(action) {\n    const ZOOM_FACTOR = 1.2;\n\n    switch (action) {\n      case \"in\":\n        this.cy.animate({\n          zoom: this.cy.zoom() * ZOOM_FACTOR,\n          duration: 200,\n        });\n        break;\n\n      case \"out\":\n        this.cy.animate({\n          zoom: this.cy.zoom() / ZOOM_FACTOR,\n          duration: 200,\n        });\n        break;\n\n      case \"fit\":\n        this.cy.animate({\n          fit: {\n            padding: 50,\n          },\n          duration: 300,\n        });\n        break;\n    }\n  }\n\n  /**\n   * Evidenzia i nodi collegati quando si passa sopra a un nodo\n   * @param {Object} node - Nodo Cytoscape\n   * @param {boolean} highlight - Se evidenziare o rimuovere l'evidenziazione\n   */\n  highlightRelatedNodes(node, highlight) {\n    const connectedEdges = node.connectedEdges();\n    const connectedNodes = connectedEdges.connectedNodes();\n\n    if (highlight) {\n      this.cy\n        .elements()\n        .difference(connectedEdges.union(connectedNodes).union(node))\n        .addClass(\"faded\");\n      connectedEdges.addClass(\"highlighted\");\n      connectedNodes.addClass(\"highlighted\");\n    } else {\n      this.cy.elements().removeClass(\"faded highlighted\");\n    }\n  }\n\n  /**\n   * Mostra l'indicatore di caricamento\n   */\n  showLoadingIndicator() {\n    const loadingIndicator = document.getElementById(\"loadingIndicator\");\n    if (loadingIndicator) {\n      loadingIndicator.style.display = \"flex\";\n    }\n  }\n\n  /**\n   * Nasconde l'indicatore di caricamento\n   */\n  hideLoadingIndicator() {\n    const loadingIndicator = document.getElementById(\"loadingIndicator\");\n    if (loadingIndicator) {\n      loadingIndicator.style.display = \"none\";\n    }\n  }\n\n  /**\n   * Mostra un messaggio di errore\n   * @param {string} message - Messaggio di errore\n   */\n  showError(message) {\n    // Verifica che il componente toast sia registrato\n    if (!customElements.get(\"toast-notification\")) {\n      console.error(\"Toast notification component not registered\");\n      alert(message); // Fallback\n      return;\n    }\n\n    const toast = document.createElement(\"toast-notification\");\n    toast.setAttribute(\"type\", \"error\");\n    toast.setAttribute(\"message\", message);\n    document.body.appendChild(toast);\n  }\n\n  /**\n   * Utility per debounce delle funzioni\n   * @param {Function} func - Funzione da debounce\n   * @param {number} wait - Tempo di attesa in ms\n   */\n  debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n}\n\n// Inizializza la pagina quando il DOM è caricato\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new SchemaPage();\n});\n"],"names":["apiService","request","endpoint","options","defaultOptions","headers","response","fetch","data","json","ok","Error","error","console","get","this","post","method","body","JSON","stringify","schemaService","constructor","endpoints","metadata","_schemaMetadata","getSchemaMetadata","success","formatSchemaData","rawData","elements","tables","forEach","table","tableData","columns","map","col","isForeignKey","isColumnForeignKey","name","relationships","push","group","id","classes","Array","isArray","rel","index","toTable","source","target","relationship","type","fromColumns","toColumns","columnName","some","includes","calculateOptimalLayout","graphData","filter","el","length","rankDir","rankSep","nodeSep","padding","idealEdgeLength","nodeOverlap","refresh","randomize","componentSpacing","nodeRepulsion","edgeElasticity","nestingFactor","gravity","numIter","getTableDetails","tableName","schema","tableNode","find","edge","from","to","findTablePaths","sourceTable","targetTable","paths","visited","Set","findPaths","current","path","add","edges","next","has","delete","window","cytoscape","dagre","customElements","SchemaPage","schemaViewer","document","getElementById","searchInput","zoomInBtn","zoomOutBtn","zoomFitBtn","cy","currentTableDetails","handleSearch","debounce","bind","handleTableSelect","handleDetailsClose","initialize","showLoadingIndicator","use","cytoscapeDagre","initializeCytoscape","setupEventListeners","loadSchemaData","showError","hideLoadingIndicator","container","style","getCytoscapeStyles","wheelSensitivity","minZoom","maxZoom","selector","shape","width","height","color","addEventListener","e","key","value","handleZoom","on","highlightRelatedNodes","layout","animate","animationDuration","run","fit","center","tableId","tableDetails","remove","createElement","setAttribute","querySelector","appendChild","searchTerm","toLowerCase","trim","removeClass","matchingNodes","nodes","node","addClass","edgesWith","eles","duration","action","zoom","highlight","connectedEdges","connectedNodes","difference","union","loadingIndicator","display","message","alert","toast","func","wait","timeout","args","clearTimeout","setTimeout"],"mappings":"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"}