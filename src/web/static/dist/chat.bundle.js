const e=new class{async request(e,t={}){try{const s={headers:{"Content-Type":"application/json"}},a=await fetch(e,{...s,...t}),n=await a.json();if(!a.ok)throw new Error(n.error||"Si Ã¨ verificato un errore");return n}catch(t){throw console.error(`API Error (${e}):`,t),t}}get(e){return this.request(e)}post(e,t){return this.request(e,{method:"POST",body:JSON.stringify(t)})}};const t=new class{constructor(){this.STORAGE_KEY="chat_messages",this.endpoints={chat:"/chat/api/chat",feedback:"/chat/api/feedback"}}async processMessage(t){const s=await e.post(this.endpoints.chat,{message:t});return s.success&&(this.saveMessageToStorage({type:"user",content:t}),this.saveMessageToStorage({type:"bot",content:s})),s}async handleFeedback(t){return e.post(this.endpoints.feedback,t)}saveMessageToStorage(e){const t=this.getMessagesFromStorage();t.push(e),localStorage.setItem(this.STORAGE_KEY,JSON.stringify(t))}getMessagesFromStorage(){try{const e=localStorage.getItem(this.STORAGE_KEY);return e?JSON.parse(e):[]}catch(e){return console.error("Error reading from storage:",e),[]}}clearMessages(){localStorage.removeItem(this.STORAGE_KEY)}};class s{constructor(){this.chatMessages=document.getElementById("chatMessages"),this.userInput=document.getElementById("userInput"),this.sendButton=document.getElementById("sendButton"),this.clearButton=document.getElementById("clearChat"),this.handleSendMessage=this.handleSendMessage.bind(this),this.handleInputKeypress=this.handleInputKeypress.bind(this),this.handleClearChat=this.handleClearChat.bind(this),this.initialize()}initialize(){this.sendButton.addEventListener("click",this.handleSendMessage),this.userInput.addEventListener("keypress",this.handleInputKeypress),this.clearButton.addEventListener("click",this.handleClearChat),this.userInput.addEventListener("input",this.adjustTextareaHeight.bind(this)),this.restoreChatMessages(),this.adjustTextareaHeight()}async handleSendMessage(){const e=this.userInput.value.trim();if(e){this.setInputState(!0),this.addMessage(e,"user"),this.userInput.value="",this.adjustTextareaHeight(),this.addLoadingIndicator();try{const s=await t.processMessage(e);this.removeLoadingIndicator(),this.addMessage(s,"bot")}catch(e){this.removeLoadingIndicator(),this.addMessage({success:!1,error:"Errore di comunicazione con il server"},"bot")}finally{this.setInputState(!1),this.userInput.focus()}}}handleInputKeypress(e){"Enter"!==e.key||e.shiftKey||(e.preventDefault(),this.handleSendMessage())}handleClearChat(){t.clearMessages();const e=this.chatMessages.querySelector(".message.bot.welcome");this.chatMessages.innerHTML="",e&&this.chatMessages.appendChild(e),this.userInput.value="",this.adjustTextareaHeight(),this.showToast("success","Chat cleared successfully","fa-check")}addMessage(e,t="user"){if("user"===t){const s=document.createElement("div");s.className=`message ${t}`,s.innerHTML=`\n                <div class="message-content">${e}</div>\n            `,this.chatMessages.appendChild(s)}else{const s=document.createElement("div");if(s.className=`message ${t}`,e.success){if(s.innerHTML=`\n                    <div class="message-content">\n                        <sql-query-box\n                            query="${e.query}"\n                            explanation="${e.explanation}"\n                            show-feedback="true">\n                        </sql-query-box>\n                        ${e.results?'\n                            <results-table\n                                page-size="10"\n                                show-pagination="true">\n                            </results-table>\n                        ':""}\n                    </div>\n                `,e.results){s.querySelector("results-table").data=e.results}}else s.innerHTML=`\n                    <div class="message-content">\n                        <toast-notification \n                            type="error"\n                            message="${e.error}"\n                            duration="5000">\n                        </toast-notification>\n                    </div>\n                `;this.chatMessages.appendChild(s)}this.chatMessages.scrollTop=this.chatMessages.scrollHeight}addLoadingIndicator(){const e=document.createElement("div");e.className="typing-indicator-container",e.id="typingIndicator",e.innerHTML='\n            <typing-indicator text="Thinking..."></typing-indicator>\n        ',this.chatMessages.appendChild(e),this.chatMessages.scrollTop=this.chatMessages.scrollHeight}removeLoadingIndicator(){const e=document.getElementById("typingIndicator");e&&e.remove()}showToast(e,t,s=null){const a=document.createElement("toast-notification");a.setAttribute("type",e),a.setAttribute("message",t),s&&a.setAttribute("icon",s),document.body.appendChild(a)}restoreChatMessages(){t.getMessagesFromStorage().forEach((e=>{this.addMessage(e.content,e.type)}))}adjustTextareaHeight(){this.userInput.style.height="auto",this.userInput.style.height=`${this.userInput.scrollHeight}px`}setInputState(e){this.userInput.disabled=e,this.sendButton.disabled=e}}document.addEventListener("DOMContentLoaded",(()=>{new s}));
//# sourceMappingURL=chat.bundle.js.map
