{"version":3,"file":"chat.bundle.js","sources":["../js/services/api-service.js","../js/services/chat-service.js","../js/pages/chat-page.js"],"sourcesContent":["/**\n * ApiService\n *\n * Servizio base per gestire tutte le chiamate API.\n * Fornisce metodi di utilità per le chiamate HTTP e gestione degli errori.\n */\nclass ApiService {\n  /**\n   * Effettua una richiesta HTTP\n   * @param {string} endpoint - L'endpoint da chiamare\n   * @param {Object} options - Opzioni della richiesta\n   * @returns {Promise} Promise con la risposta\n   */\n  async request(endpoint, options = {}) {\n    try {\n      const defaultOptions = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const response = await fetch(endpoint, { ...defaultOptions, ...options });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || \"Si è verificato un errore\");\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Effettua una richiesta GET\n   * @param {string} endpoint\n   * @returns {Promise}\n   */\n  get(endpoint) {\n    return this.request(endpoint);\n  }\n\n  /**\n   * Effettua una richiesta POST\n   * @param {string} endpoint\n   * @param {Object} data\n   * @returns {Promise}\n   */\n  post(endpoint, data) {\n    return this.request(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    });\n  }\n}\n\n// Esporta un'istanza singola del servizio\nexport const apiService = new ApiService();\n","/**\n * ChatService\n *\n * Gestisce la logica di business per la funzionalità di chat.\n * Si occupa di:\n * - Processare i messaggi\n * - Gestire il feedback\n * - Gestire lo storage locale dei messaggi\n */\nimport { apiService } from \"./api-service.js\";\n\nclass ChatService {\n  constructor() {\n    this.STORAGE_KEY = \"chat_messages\";\n    this.endpoints = {\n      chat: \"/chat/api/chat\",\n      feedback: \"/chat/api/feedback\",\n    };\n  }\n\n  /**\n   * Processa un messaggio utente\n   * @param {string} message\n   * @returns {Promise} Promise con la risposta elaborata\n   */\n  async processMessage(message) {\n    const response = await apiService.post(this.endpoints.chat, { message });\n\n    if (response.success) {\n      this.saveMessageToStorage({\n        type: \"user\",\n        content: message,\n      });\n\n      this.saveMessageToStorage({\n        type: \"bot\",\n        content: response,\n      });\n    }\n\n    return response;\n  }\n\n  /**\n   * Gestisce il feedback positivo\n   * @param {Object} data\n   * @returns {Promise}\n   */\n  async handleFeedback(data) {\n    return apiService.post(this.endpoints.feedback, data);\n  }\n\n  /**\n   * Salva un messaggio nel localStorage\n   * @param {Object} message\n   */\n  saveMessageToStorage(message) {\n    const messages = this.getMessagesFromStorage();\n    messages.push(message);\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(messages));\n  }\n\n  /**\n   * Recupera i messaggi dal localStorage\n   * @returns {Array}\n   */\n  getMessagesFromStorage() {\n    try {\n      const messages = localStorage.getItem(this.STORAGE_KEY);\n      return messages ? JSON.parse(messages) : [];\n    } catch (error) {\n      console.error(\"Error reading from storage:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Pulisce la cronologia dei messaggi\n   */\n  clearMessages() {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n}\n\n// Esporta un'istanza singola del servizio\nexport const chatService = new ChatService();\n","/**\n * ChatPage\n *\n * Gestisce la logica della pagina di chat, coordinando l'interazione tra\n * i Web Components e i servizi. Questo script è responsabile di:\n * - Inizializzare i componenti della chat\n * - Gestire l'invio e la ricezione dei messaggi\n * - Gestire lo stato della chat\n * - Coordinare le interazioni UI\n */\n\nimport { chatService } from \"../services/chat-service.js\";\n\nclass ChatPage {\n  constructor() {\n    // Riferimenti agli elementi del DOM\n    this.chatMessages = document.getElementById(\"chatMessages\");\n    this.userInput = document.getElementById(\"userInput\");\n    this.sendButton = document.getElementById(\"sendButton\");\n    this.clearButton = document.getElementById(\"clearChat\");\n\n    // Binding dei metodi per mantenere il contesto\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n    this.handleInputKeypress = this.handleInputKeypress.bind(this);\n    this.handleClearChat = this.handleClearChat.bind(this);\n\n    // Inizializza la pagina\n    this.initialize();\n  }\n\n  /**\n   * Inizializza la pagina di chat\n   * - Imposta gli event listener\n   * - Ripristina i messaggi precedenti\n   */\n  initialize() {\n    // Imposta gli event listener\n    this.sendButton.addEventListener(\"click\", this.handleSendMessage);\n    this.userInput.addEventListener(\"keypress\", this.handleInputKeypress);\n    this.clearButton.addEventListener(\"click\", this.handleClearChat);\n    this.userInput.addEventListener(\n      \"input\",\n      this.adjustTextareaHeight.bind(this)\n    );\n\n    // Ripristina i messaggi dal localStorage\n    this.restoreChatMessages();\n\n    // Imposta l'altezza iniziale della textarea\n    this.adjustTextareaHeight();\n  }\n\n  /**\n   * Gestisce l'invio di un messaggio\n   * @returns {Promise<void>}\n   */\n  async handleSendMessage() {\n    const message = this.userInput.value.trim();\n    if (!message) return;\n\n    // Disabilita l'input durante l'elaborazione\n    this.setInputState(true);\n\n    // Aggiunge il messaggio dell'utente\n    this.addMessage(message, \"user\");\n    this.userInput.value = \"\";\n    this.adjustTextareaHeight();\n\n    // Mostra l'indicatore di digitazione\n    this.addLoadingIndicator();\n\n    try {\n      // Invia il messaggio al servizio chat\n      const response = await chatService.processMessage(message);\n\n      // Rimuove l'indicatore di digitazione\n      this.removeLoadingIndicator();\n\n      // Aggiunge la risposta del bot\n      this.addMessage(response, \"bot\");\n    } catch (error) {\n      // Rimuove l'indicatore di digitazione\n      this.removeLoadingIndicator();\n\n      // Mostra l'errore\n      this.addMessage(\n        {\n          success: false,\n          error: \"Errore di comunicazione con il server\",\n        },\n        \"bot\"\n      );\n    } finally {\n      // Riabilita l'input\n      this.setInputState(false);\n      this.userInput.focus();\n    }\n  }\n\n  /**\n   * Gestisce l'evento keypress sulla textarea\n   * @param {KeyboardEvent} e\n   */\n  handleInputKeypress(e) {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      this.handleSendMessage();\n    }\n  }\n\n  /**\n   * Gestisce la pulizia della chat\n   */\n  handleClearChat() {\n    chatService.clearMessages();\n\n    // Mantiene solo il messaggio di benvenuto\n    const welcomeMessage = this.chatMessages.querySelector(\n      \".message.bot.welcome\"\n    );\n    this.chatMessages.innerHTML = \"\";\n    if (welcomeMessage) {\n      this.chatMessages.appendChild(welcomeMessage);\n    }\n\n    // Resetta l'input\n    this.userInput.value = \"\";\n    this.adjustTextareaHeight();\n\n    // Mostra notifica\n    this.showToast(\"success\", \"Chat cleared successfully\", \"fa-check\");\n  }\n\n  /**\n   * Aggiunge un messaggio alla chat\n   * @param {string|Object} content - Contenuto del messaggio\n   * @param {string} type - Tipo di messaggio ('user' o 'bot')\n   */\n  addMessage(content, type = \"user\") {\n    if (type === \"user\") {\n      // Crea un messaggio utente semplice\n      const messageDiv = document.createElement(\"div\");\n      messageDiv.className = `message ${type}`;\n      messageDiv.innerHTML = `\n                <div class=\"message-content\">${content}</div>\n            `;\n      this.chatMessages.appendChild(messageDiv);\n    } else {\n      // Utilizza il componente personalizzato per i messaggi bot\n      const messageDiv = document.createElement(\"div\");\n      messageDiv.className = `message ${type}`;\n\n      if (!content.success) {\n        // Messaggio di errore\n        messageDiv.innerHTML = `\n                    <div class=\"message-content\">\n                        <toast-notification \n                            type=\"error\"\n                            message=\"${content.error}\"\n                            duration=\"5000\">\n                        </toast-notification>\n                    </div>\n                `;\n      } else {\n        // Risposta normale con query SQL\n        messageDiv.innerHTML = `\n                    <div class=\"message-content\">\n                        <sql-query-box\n                            query=\"${content.query}\"\n                            explanation=\"${content.explanation}\"\n                            show-feedback=\"true\">\n                        </sql-query-box>\n                        ${\n                          content.results\n                            ? `\n                            <results-table\n                                page-size=\"10\"\n                                show-pagination=\"true\">\n                            </results-table>\n                        `\n                            : \"\"\n                        }\n                    </div>\n                `;\n\n        // Se ci sono risultati, li imposta nella tabella\n        if (content.results) {\n          const table = messageDiv.querySelector(\"results-table\");\n          table.data = content.results;\n        }\n      }\n\n      this.chatMessages.appendChild(messageDiv);\n    }\n\n    // Scrolla alla fine della chat\n    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n  }\n\n  /**\n   * Aggiunge l'indicatore di caricamento\n   */\n  addLoadingIndicator() {\n    const loadingDiv = document.createElement(\"div\");\n    loadingDiv.className = \"typing-indicator-container\";\n    loadingDiv.id = \"typingIndicator\";\n\n    loadingDiv.innerHTML = `\n            <typing-indicator text=\"Thinking...\"></typing-indicator>\n        `;\n\n    this.chatMessages.appendChild(loadingDiv);\n    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n  }\n\n  /**\n   * Rimuove l'indicatore di caricamento\n   */\n  removeLoadingIndicator() {\n    const indicator = document.getElementById(\"typingIndicator\");\n    if (indicator) {\n      indicator.remove();\n    }\n  }\n\n  /**\n   * Mostra un toast di notifica\n   * @param {string} type - Tipo di notifica\n   * @param {string} message - Messaggio da mostrare\n   * @param {string} icon - Classe dell'icona FontAwesome\n   */\n  showToast(type, message, icon = null) {\n    const toast = document.createElement(\"toast-notification\");\n    toast.setAttribute(\"type\", type);\n    toast.setAttribute(\"message\", message);\n    if (icon) {\n      toast.setAttribute(\"icon\", icon);\n    }\n    document.body.appendChild(toast);\n  }\n\n  /**\n   * Ripristina i messaggi precedenti dal localStorage\n   */\n  restoreChatMessages() {\n    const messages = chatService.getMessagesFromStorage();\n    messages.forEach((msg) => {\n      this.addMessage(msg.content, msg.type);\n    });\n  }\n\n  /**\n   * Regola l'altezza della textarea in base al contenuto\n   */\n  adjustTextareaHeight() {\n    this.userInput.style.height = \"auto\";\n    this.userInput.style.height = `${this.userInput.scrollHeight}px`;\n  }\n\n  /**\n   * Imposta lo stato di abilitazione/disabilitazione degli input\n   * @param {boolean} disabled\n   */\n  setInputState(disabled) {\n    this.userInput.disabled = disabled;\n    this.sendButton.disabled = disabled;\n  }\n}\n\n// Inizializza la pagina quando il DOM è caricato\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  new ChatPage();\n});\n"],"names":["apiService","request","endpoint","options","defaultOptions","headers","response","fetch","data","json","ok","Error","error","console","get","this","post","method","body","JSON","stringify","chatService","constructor","STORAGE_KEY","endpoints","chat","feedback","processMessage","message","success","saveMessageToStorage","type","content","handleFeedback","messages","getMessagesFromStorage","push","localStorage","setItem","getItem","parse","clearMessages","removeItem","ChatPage","chatMessages","document","getElementById","userInput","sendButton","clearButton","handleSendMessage","bind","handleInputKeypress","handleClearChat","initialize","addEventListener","adjustTextareaHeight","restoreChatMessages","value","trim","setInputState","addMessage","addLoadingIndicator","removeLoadingIndicator","focus","e","key","shiftKey","preventDefault","welcomeMessage","querySelector","innerHTML","appendChild","showToast","messageDiv","createElement","className","query","explanation","results","scrollTop","scrollHeight","loadingDiv","id","indicator","remove","icon","toast","setAttribute","forEach","msg","style","height","disabled"],"mappings":"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"}